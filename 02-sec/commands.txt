# p66-1
> const rand = Math.floor(Math.random()*10);
undefined
> rand
4
> const judge = if (rand % 2 == 0) `even` else `odd`;
const judge = if (rand % 2 == 0) `even` else `odd`;

# p66-2
const judge = rand % 2 == 0 ? `even` : `odd`;
undefined
> judge
'even'

# p67-1
> function double(n) {
... return n * 2;
... }
undefined
> double(4)
8
> const twice = function (n) {
... return n * 2;
... }
undefined
> twice(3)
6

# p67, 68
$ node 02-sec/javascripts/fn-statement.js 
bar

# p68-2
> fn.__proto__.constructor.name
'Function'
> fn.__proto__.__proto__.constructor.name
'Object'

# p69-1
> const sum = new Function('n', 'm', 'return n + m;');
undefined
> sum(3, 4)
7
> const add = function(n, m){
... return n + m;
... };
undefined
> add(4, 5)
9

# p69-2
> const foo = {
... bar: 'bar',
... baz: function(){
..... console.log('I am `baz` method');
..... },
... };
undefined
> foo.baz();
I am `baz` method

# p70-1
> const fuu = {
... bar: 'bar',
... baz(){
..... console.log('I am `baz` method');
..... },
... };
undefined
> fuu.baz();
I am `baz` method

# p72-1
> function mercury() {}
undefined
> mercury.name
'mercury'
> const fn = function mars(){};
undefined
> fn.name
'mars'

# p72-2
> (function(){}).name
''
> (()=>{}).name

# p72-3
> const venus = function(){ console.log('I am Venus!'); };
undefined
> venus()
I am Venus!
undefined
> venus.name
'venus'

> const jupiter = () => { console.log('I am Jupiter!') };
undefined
> jupiter()
I am Jupiter!
undefined
> jupiter.name
'jupiter'

# p77
$ node 
Welcome to Node.js v14.4.0.
Type ".help" for more information.
> .load bird-class.js
> typeof Bird
'function'

# p78
$ node --version
v14.4.0

$ node
Welcome to Node.js v14.4.0.
Type ".help" for more information.
> [1, 2, 3].__proto__
[]
> { foo: 'bar' }.__proto__
{}
> 'JavaScript'.__proto__
[String: '']
> (65536).__proto__
[Number: 0]

# p78, 79
> new Array(1, 2, 3);
[ 1, 2, 3 ]
> typeof Array
'function'
> Array.prototype
[]
> new String('JavaScript');
[String: 'JavaScript']
> typeof String
'function'
> String.prototype
[String: '']

# p79-1
> Number.prototype.toString();
'0'
> (100).toString();
'100'
> String.prototype.replace('', 'blank');
'blank'
> 'LiveScript'.replace('Live', 'Java');
'JavaScript'

# p79-2
$ node
> .load bird-class.js
> hawk.__proto__
FlyableBird {}
> hawk.__proto__.__proto__
Bird {}
> hawk.__proto__.__proto__.__proto__
{}
> hawk.__proto__.__proto__.__proto__.__proto__
null

# p80-1
> Object.prototype.toString();
'[object Object]'
> hawk.toString();
'[object Object]'
> Bird.prototype.toString = function() { return `Bird { name: ${this.name} }`; };
[Function (anonymous)]
> hawk.toString();
'Bird { name: タカ }'
> delete Bird.prototype.toString;
true
> hawk.toString();
'[object Object]'

# p92
> const obj = {};
undefined
> obj.foo
undefined
> obj.foo.bar
Uncaught TypeError: Cannot read property 'bar' of undefined
> obj?.foo?.bar
undefined

# p97
> const dump = function () { console.log('`this` is', this); };
undefined
> const obj = new dump();
`this` is dump {}
undefined
> obj
dump {}
> dump.prototype
dump {}
> obj !== dump.prototype
true

# p98
> this
<ref *1> Object [global] {
  global: [Circular *1],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  },
  queueMicrotask: [Function: queueMicrotask],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  }
}

# p99-1
> const dump = function() { console.log(this); };
undefined
> dump();
<ref *1> Object [global] {
  global: [Circular *1],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  },
  queueMicrotask: [Function: queueMicrotask],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  }
}

# p99-2
> const Person = function(name) { this.name = name; return this; };
undefined
> Person('somebody');
<ref *1> Object [global] {
  global: [Circular *1],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  },
  queueMicrotask: [Function: queueMicrotask],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  },
  name: 'somebody'
}
> name
'somebody'

# p100-1
> const Person = function(name) { 'use strict'; this.name = name; return this; };
undefined
> Person('somebody');
Uncaught TypeError: Cannot set property 'name' of undefined
    at Person (repl:1:57)

# p100-2
> class Foo { constructor() { console.log('`this` is', this); } }
undefined
> Foo();
Uncaught TypeError: Class constructor Foo cannot be invoked without 'new'
> new Foo();
`this` is Foo {}

# p101
> const fn = function() { 'use strict'; console.log(this); console.log(globalThis); };
undefined
> fn();
undefined
<ref *1> Object [global] {
  global: [Circular *1],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  },
  queueMicrotask: [Function: queueMicrotask],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)]
  }
}